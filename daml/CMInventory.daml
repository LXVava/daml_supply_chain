daml 1.2
module CMInventory where

import SCTypes
import Order

import RMInventory

type ComponentCid = ContractId Component

template Component
  with
    supplier : Party
    owner : Party
    sku : Text
    qty : Int
    observers : [Party]
  where
    ensure qty >= 0

    signatory supplier

    observer observers


    controller owner can
        CMQty : ComponentCid
            with
                nQty : Int
            do
                create this with
                    qty = nQty

        -- Split the Inventory by dividing the amount.
        CMSplit : (ComponentCid, ComponentCid)
            with
                splitAmount: Int
            do
                let restAmount = qty - splitAmount
                splitCid <- create this with qty = splitAmount
                restCid <- create this with qty = restAmount
                return (splitCid, restCid)

        -- Merge two Inventories by aggregating their amounts.
        CMMerge : ComponentCid
            with
                otherCid: ComponentCid
            do
                otherComponent <- fetch otherCid
                -- Check the two Inventories are compatible
                assert (
                    sku == otherComponent.sku &&
                    owner == otherComponent.owner &&
                    supplier == otherComponent.supplier
                    )
                -- Retire the old Item
                archive otherCid
                -- Return the merged Item
                create this with qty = qty + otherComponent.qty
               

        CMAddObserver : ComponentCid
            with
                newObserver : Party
            do 
                create this with 
                    observers = newObserver :: observers

        CMRemoveObserver : ComponentCid
            with
                oldObserver : Party
            do 
                create this with 
                    observers = filter (/= oldObserver) observers

        CMfill : (ComponentCid, ComponentCid)
            with
                oid : OrderCid
            do  
                order <- fetch oid
                let fAmount = order.qty
                assert (
                    order.assetType == Cmpnnt &&
                    fAmount <= qty
                    )
                
                exercise oid OrderFill with 
                    fillQuantity = fAmount
                    fillAssetType = Cmpnnt                

                inv <- create this with qty = qty - fAmount
                fill <- create this with 
                    qty = fAmount
                    owner = order.buyer
                return (inv, fill)

        
        CMMfg : (ComponentCid, RawMaterialCid)
            with
                rwInvId : RawMaterialCid
            do
                rawInv <- fetch rwInvId
                let mfgAmount = rawInv.qty / 3
                let remainAmount = rawInv.qty % 3
                nRawInv <- exercise rwInvId RMQty with
                    nQty = remainAmount
                mfgInv <- create this with 
                    qty = mfgAmount
                return (mfgInv, nRawInv)
            