daml 1.2
module WHSInventory where

import SCTypes
import Order

import ASMInventory

type WarehouseCid = ContractId Warehouse

template Warehouse
  with
    supplier : Party
    owner : Party
    sku : Text
    qty : Int
    observers : [Party]
  where
    ensure qty >= 0

    signatory supplier

    observer observers


    controller owner can

        WHSStore : (WarehouseCid, AssemblyCid)
            with
                assmblyId : AssemblyCid
            do
                assembly <- fetch assmblyId
                asmInv <- create this with 
                    qty = assembly.qty + qty
                nAssmblyInv <- exercise assmblyId ASMQty with
                    nQty = 0
                return (asmInv, nAssmblyInv)


        -- Split the Inventory by dividing the amount.
        WHSSplit : (WarehouseCid, WarehouseCid)
            with
                splitAmount: Int
            do
                let restAmount = qty - splitAmount
                splitCid <- create this with qty = splitAmount
                restCid <- create this with qty = restAmount
                return (splitCid, restCid)

        -- Merge two Inventories by aggregating their amounts.
        WHSMerge : WarehouseCid
            with
                otherCid: WarehouseCid
            do
                otherWarehouse <- fetch otherCid
                -- Check the two Inventories are compatible
                assert (
                    sku == otherWarehouse.sku &&
                    owner == otherWarehouse.owner &&
                    supplier == otherWarehouse.supplier
                    )
                -- Retire the old Item
                archive otherCid
                -- Return the merged Item
                create this with qty = qty + otherWarehouse.qty
               

        WHSAddObserver : WarehouseCid
            with
                newObserver : Party
            do 
                create this with 
                    observers = newObserver :: observers

        WHSRemoveObserver : WarehouseCid
            with
                oldObserver : Party
            do 
                create this with 
                    observers = filter (/= oldObserver) observers

        WHSfill : (WarehouseCid, WarehouseCid)
            with
                oid : OrderCid
            do  
                order <- fetch oid
                assert (
                    order.assetType == Wrhsd &&
                    order.qty <= qty
                    )

                let fAmount = order.qty
               
                exercise oid OrderFill with 
                    fillQuantity = fAmount
                    fillAssetType = Wrhsd                

                inv <- create this with qty = qty - fAmount
                fill <- create this with 
                    qty = fAmount
                    owner = order.buyer
                return (inv, fill)
            