daml 1.2
module WHSInventory where

import SCTypes
import Order

import ASMInventory

type WarehouseCid = ContractId Warehouse
template Warehouse

  with
    supplier : Party
    owner : Party
    sku : Text
    qty : Int
    observers : [Party]

  where
    ensure qty >= 0

    signatory owner

    observer observers


    controller owner can

        WHSStore : (WarehouseCid, AssemblyCid)
            with
                assmblyId : AssemblyCid
            do
                assembly <- fetch assmblyId
                archive assmblyId
                asmInv <- create this with 
                    qty = assembly.qty + qty

                nAssmblyInv <- create assembly with
                    qty = 0

                archive nAssmblyInv

                return (asmInv, nAssmblyInv)

        WHSfill : (WarehouseCid, WarehouseCid)
            with
                oid : AcceptedOrderCid
            do  
                order <- fetch oid
                assert (
                    order.assetType == Wrhsd &&
                    order.qty <= qty
                    )

                let fAmount = order.qty
               
                exercise oid Fill with 
                    fillQuantity = fAmount
                    fillAssetType = Wrhsd
                    fillSku = sku               

                inv <- create this with 
                    qty = qty - fAmount

                fill <- create this with 
                    qty = fAmount
                return (inv, fill)

        WHSTransfer : WarehouseTransferId
            with
                newOwner : Party
            do create WarehouseTransfer with
                whse = this; newOwner


type WarehouseTransferId = ContractId WarehouseTransfer
template WarehouseTransfer

    with 
        whse : Warehouse
        newOwner: Party
        
    where
        signatory whse.supplier, whse.owner

        controller whse.owner can
            WHSCancel : WarehouseCid
                do create whse

        controller newOwner can
            WHSReject : WarehouseCid
                do create whse

            WHSAccept : WarehouseCid
                do
                newwhse <- create whse with
                    owner = newOwner
                    observers = []
                return newwhse
